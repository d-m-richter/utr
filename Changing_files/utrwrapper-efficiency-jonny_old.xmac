#!/usr/bin/env utrwrapper.py
## An (utrwrapper.py) extended macro starts with a configuration header embedded in comment lines (preceded by a single '#')
## For real comment lines in the header use multiple '#'s
## Run utrwrapper.py -h for a list of all available configuration options and their effects

## This macro is an example of using utrwrapper.py to prepare utr for and execute an efficiency simulation looping over the source energy

#[generalConfig]
#outputDir=output/{{folder}}

#[environmentVariables]
#filenamePrefix=Efficiency_
#filenameSuffix=_MeV
#filenameTemplate={filenamePrefix}{loopVar}{filenameSuffix}
#setterCmd=/gps/ene/mono {loopVar} MeV

#[utrBuildOptions]
#CAMPAIGN=Others
#DETECTOR_CONSTRUCTION=Efficiency
#USE_TARGETS=OFF
#GENERATOR_ANGCORR=OFF
#GENERATOR_ANGDIST=OFF
#EVENT_EDEP=ON 
#EVENT_EKIN=OFF
#EVENT_EVENTWISE=OFF

#[getHistogramArgs]
#quantity=edep
#maxenergy=10
#maxid=0

#[histogramToTxtArgs]
#end=0

## The required magic string signals the end of the configuration header
#START_OF_MACRO

# Never simulate more than 2^32= 4294967296 particles using /run/beamOn, since this causes an overflow in the random number seed, giving you in principle the same results over and over again.
# In such cases execute the same simulation multiple times instead.
/control/alias beamOnStatistics {{disintegrations}} # 10000000

# Get the filenamePrefix and filenameSuffix variables defined in the configuration header as GEANT4 aliases
/control/getEnv filenamePrefix
/control/getEnv filenameSuffix

# Disable appendage of additional IDs to filenames (as unique filenames containing the simulated energy will be used for each beamOn)
/utr/setUseFilenameID False
# Set the number of required decimal places for padding of loopVar
/control/alias appendZerosToVarPadding 2


# Do the usual initialization steps for an efficiency simulation
/run/initialize

/gps/particle gamma
/gps/pos/type Point
/gps/ang/type iso
/gps/ene/type Gauss

/gps/pos/confine Plastikzylinder
/gps/pos/centre 0. 0. -12. mm

# Run the generic macro in a loop
# loop Syntax: /control/loop MacroFile Variable Start End Increment
# for each Syntax: /control/foreach MacroFile Variable ValueList
# To use the variable in the macro to be looped refer to it wrapped in {} as {Variable} in the macro
# Remember that due to the numerical inaccuracies when adding float numbers, a loop might generate a run more or less than expected!
/control/foreach macros/examples/genericLoopable.mac loopVar 0.661657 #0.5 1. 2. 3. 4. 5. 
#/control/loop macros/examples/genericLoopable.mac loopVar 10. 15. 2.5
